---
layout: base
title: Custom checks
permalink: '/developers/custom-checks/'
order: 4
---

<h1>{{title}}</h1>
<p>You can extend Sa11y beyond checking for accessibility issues. For example, create checks that promote better usability, or encourage proper use of components and web style guidelines. Custom checks should be created within <code>/src/sa11y-custom-checks.js</code> - which is seperate from Sa11y's core library.</p>

<h2>How to create a custom check</h2>
<p>You can create custom checks with just a few lines of JavaScript. There are two types of annotations you create: Button annotations and full-page banner annotations that are appended to the top of the page. There are also several utilities and selectors you can use.</p>

<div class="accordion mb-4" id="accordionExample" style="max-width: 1000px;">
  <div class="accordion-item">
    <h3 class="accordion-header" id="headingOne">
      <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseOne" aria-expanded="false" aria-controls="collapseOne">
        Utilities and selectors 
      </button>
    </h3>
    <div id="collapseOne" class="accordion-collapse collapse" aria-labelledby="headingOne" data-bs-parent="#accordionExample">
      <div class="accordion-body">
        <h4>Utilities</h4>
        <ul>
            <li><code>Sa11y.computeAriaLabel()</code> - Process ARIA attributes on elements.</li>
            <li><code>Sa11y.fnIgnore()</code> - Ignore children of element.</li>
            <li><code>Sa11y.debounce()</code> - Simple <a href="https://www.joshwcomeau.com/snippets/javascript/debounce/">debounce</a> utility.</li>
            <li><code>Sa11y.computeTextNodeWithImage()</code> - Compute alt text on images within a text node.</li>
            <li><code>Sa11y.sanitizeForHTML()</code> - Converts various HTML characters back to their respective entity code.</li>
        </ul>
        <h4>Selectors</h4>
        <p>For performance, you can reuse these selectors when creating custom checks.</p>
        <ul class="ul-dual">
            <li><code>Sa11y.$h</code> - Select all H1, H2, H3, H4, H5, H6, [role='heading'][aria-level]</li>
            <li><code>Sa11y.$h1</code> - Select all H1</li>
            <li><code>Sa11y.$img</code> - Select all IMG</li>
            <li><code>Sa11y.$links</code> - Select all A[HREF]</li>
            <li><code>Sa11y.$inputs</code> - Select all INPUT</li>
            <li><code>Sa11y.$iframes</code> - Select all IFRAME</li>
            <li><code>Sa11y.$videos</code> - Select all IFRAME that contains a video player only</li>
            <li><code>Sa11y.$audio</code>  - Select all IFRAME and AUDIO that contains an audio player only</li>
            <li><code>Sa11y.$dataviz</code> - Select all IFRAME that contains a visualization only</li>
            <li><code>Sa11y.$twitter</code> - Select all Twitter IFRAME</li>
            <li><code>Sa11y.$embeddedContent</code> - Select all IFRAME that is not an identified audio player, video player, Twitter widget or visualization</li>
            <li><code>Sa11y.$strongitalics</code> - Select all STRONG and EM</li>
            <li><code>Sa11y.$badDevLinks</code> - Select all links via <code>linksToFlag</code> prop.</li>
            <li><code>Sa11y.$checkPDF</code> - Select all a[href$='.pdf']</code></li>
            <li><code>Sa11y.$tables</code> - Select all TABLE</li>
            <li><code>Sa11y.$lang</code> - Select HTML's LANG attribute</li>
            <li><code>Sa11y.$blockquotes</code> - Select all BLOCKQUOTE</li>
            <li><code>Sa11y.$p</code> - Select all P</li>
            <li><code>Sa11y.$allCaps</code> - Select all H1, H2, H3, H4, H5, H6, LI, BLOCKQUOTE</li>
            <li><code>Sa11y.$readability</code> - Select all P and LI within specified container</li>
        </ul>
      </div>
    </div>
  </div>
</div>

<h3>Button annotation</h2>
<ol>
    <li>Create your condition.</li>
    <li>Use <code>Sa11y.root</code> instead of <code>document</code> within your selector.</li>
    <li>Add <code>Sa11y.warningCount++;</code> or <code>Sa11y.errorCount++;</code> to update the warning or error count.</li>
    <li>Add respective CSS classes.
        <ul>
            <li><strong>Highlighting text:</strong> <code>.sa11y-warning-text</code> or <code>.sa11y-error-text</code></li>
            <li><strong>Border around elements:</strong> <code>.sa11y-warning-border</code> or <code>.sa11y-error-border</code> or <code>.sa11y-good-border</code></li>
        </ul>
    </li>
    <li>Use the <a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/insertAdjacentHTML">insertAdjacentHTML() method</a> to append the annotation either before or after the element.</li> 
    <li>Use <code class="language-js">Sa11y.annotate(string, string, boolean)</code> within the aforementioned method to generate the annotation.
        <ul>
            <li><strong>String (type of annotation):</strong> <code>M["ERROR"]</code> or <code>M["WARNING"]</code> or <code>M["GOOD"]</code></li>
            <li><strong>String:</strong> <code>C["YOUR_CUSTOM_TOOLTIP_MESSAGE"])</code></li>
            <li><strong>Boolean (Optional):</strong> Pass <code>true</code> if you'd like to position the annotation inline with text.</li>
        </ul>    
    </li>
</ol>
<h3>Full-width banner annotation</h3>
<ol>
    <li>Create your condition.</li>
    <li>Use <code>Sa11y.root</code> instead of <code>document</code> within your selector.</li>
    <li>Add <code>Sa11y.warningCount++;</code> or <code>Sa11y.errorCount++;</code> to update the warning or error count.</li>
    <li>Banners should be appended after Sa11y's container. Use <code>Sa11y.panel.insertAdjacentHTML()</code> method with a position parameter of <code>afterend</code>.</li>
    <li>Use <code class="language-js">Sa11y.annotateBanner(string, string)</code> within the aforementioned method to generate the annotation.
        <ul>
            <li><strong>String (type of annotation):</strong> <code>M["ERROR"]</code> or <code>M["WARNING"]</code> or <code>M["GOOD"]</code></li>
            <li><strong>String:</strong> <code>C["YOUR_CUSTOM_TOOLTIP_MESSAGE"])</code></li>
        </ul>    
    </li>
</ol>
	
<h2>Recipes</h2>
<p>Both recipes below are included in <a href="https://github.com/ryersondmp/sa11y/blob/master/src/sa11y-custom-checks.js">sa11y-custom-checks.js</a></p>

<h3>Overusing a component on a page</h3>
<p>The example detects if more than one announcement is detected on a page, although it could be easily extended to anything. Too many slideshows? Too many accordions? You name it.</p>

<pre><code class="language-js">const $checkAnnouncement = Sa11y.root.querySelectorAll(".announcement-component");
if ($checkAnnouncement.length &lt; 1) {
    Sa11y.warningCount++;
    for (let i = 1; i &lt; $checkAnnouncement.length; i++) {
        $checkAnnouncement[i].classList.add("sa11y-warning-border");
        $checkAnnouncement[i].insertAdjacentHTML(
            "beforebegin", 
            Sa11y.annotate(
                M["WARNING"], 
                C["QA_TOO_MANY_COMPONENTS_EXAMPLE"]
            )
        );
    }
}</code></pre>
<h4>Code explained</h4>
<p>If Sa11y detects more than one instance of the <code>.announcement-component</code> CSS class, it will be flagged as a warning. The warning button will only appear on every instance except the first component. <code>C['QA_TOO_MANY_COMPONENTS_EXAMPLE']</code> represents a string (tooltip message).</p>

<h4>Demo</h4>
<div class="example p-5">
    <section class="alert alert-primary sa11y-announcement-component" aria-label="Announcement"><i class="bi bi-megaphone-fill"></i> This is an announcement component!</section>
    <section class="alert alert-primary sa11y-announcement-component" aria-label="Announcement"><i class="bi bi-megaphone-fill"></i> This is another announcement component!</section>
</div>

<hr aria-hidden="true" class="mt-5">

<h3>Accordion component contains a form</h3>
<p>Forms nested within accordion components can be problematic if it uses server-sided validation. The page will reload, and the accordion usually returns back to its closed state. This is problematic for everyone.</p>
<pre><code class="language-js">const $checkAccordions = Sa11y.root.querySelectorAll(".sa11y-accordion-example");
$checkAccordions.forEach($el => {
    const checkForm = $el.querySelector("form");
    if (!!checkForm && checkForm.length) {
        Sa11y.errorCount++;
        $el.classList.add("sa11y-error-border");
        $el.insertAdjacentHTML("beforebegin", 
            Sa11y.annotate(
                M["ERROR"], 
                C["ACCORDION_FORM_MESSAGE"]
            )
        );
    }
});</code></pre>

<h4>Demo</h4>
<div class="example p-5">
    <div class="accordion sa11y-accordion-example" id="accordion">
    <div class="accordion-item">
        <h2 class="accordion-header" id="flush-headingOne">
        <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#flush-collapseOne" aria-expanded="false" aria-controls="flush-collapseOne">
            Contact us!
        </button>
        </h2>
        <div id="flush-collapseOne" class="accordion-collapse collapse" aria-labelledby="flush-headingOne" data-bs-parent="#accordion">
        <div class="accordion-body">
            <form>
                <div class="p-3">
                    <label for="name">Last name</label>
                    <input type="text" id="name">
                </div>
                <div class="p-3">
                    <label for="lname">First name</label>
                    <input type="text" id="lname">
                </div>
                <div class="p-3">
                    <input class="btn btn-primary" type="submit" value="Submit" disabled>
                </div>
            </form>
        </div>
        </div>
    </div>
    </div>
</div>

<hr aria-hidden="true" class="mt-5">

<h2>Add or suggest a recipe</h3>
<p>Share your recipe on <a href="https://github.com/ryersondmp/sa11y/issues">GitHub.</a></p>

{% include "partials/pagination-developers.njk" %}
{% include "partials/prism.njk" %}